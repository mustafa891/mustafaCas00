import { useState, useEffect } from "react";
import { toast } from "react-hot-toast";
import { useDispatch, useSelector } from "react-redux";
import {
  generateSecretTwoFA,
  enableTwoFA,
  getTwoFactorStatus,
} from "../../store/users/userSlice";
import ButtonGreen from "../template/buttons/ButtonGreen";

const TwoFactor = () => {
  const [code, setCode] = useState("");
  const { errors, loadingButton, message, twoFAData, twoFaEnabled } =
    useSelector((state) => state.users);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(getTwoFactorStatus());
  }, [dispatch]);

  useEffect(() => {
    if (errors !== null) {
      toast.error(errors, {
        style: {
          background: "#607d8b",
          color: "#fff",
        },
      });
    }
    if (message !== null) {
      toast.success(message, {
        style: {
          background: "#607d8b",
          color: "#fff",
        },
      });
      setCode("");
    }
  }, [errors, message]);

  const showQR = (e) => {
    e.preventDefault();
    try {
      dispatch(generateSecretTwoFA());
    } catch (error) {
      console.log(error);
    }
  };

  const handleEnable = (e) => {
    e.preventDefault();
    if (!twoFAData?.secret) {
      toast.error(
        "Remember to show the QR Code and keep your secret key in a safe place",
        {
          style: {
            background: "#607d8b",
            color: "#fff",
          },
        }
      );
      return;
    }
    if (code === "") {
      toast.error("You must enter an authentication code", {
        style: {
          background: "#607d8b",
          color: "#fff",
        },
      });
      return;
    }
    dispatch(
      enableTwoFA({
        secret: twoFAData?.secret,
        code,
        type: "enable",
      })
    );
  };

  const handleDisable = (e) => {
    e.preventDefault();
    if (code === "") {
      toast.error("You must enter an authentication code", {
        style: {
          background: "#607d8b",
          color: "#fff",
        },
      });
      return;
    }
    dispatch(
      enableTwoFA({
        secret: twoFAData?.secret,
        code,
        type: "disable",
      })
    );
  };

  return (
    <>
      <form>
        {twoFaEnabled ? (
          <p className="text-green-500 text-center">
            <i className="fa-solid fa-circle-check mr-2"></i> 2FA Enabled
          </p>
        ) : (
          <>
            <p className="text-black-300 text-sm text-left">
              Step 1: Scan this QR code
            </p>
            <p className="text-black-500 text-sm text-left">
              Go to your authenticator app and scan the QR code using your
              device's camera.
            </p>
            {twoFAData === null ? (
              <button
                type="button"
                className="bg-theme text-black-300 px-8 py-4 mt-4 w-full template-btn-green capitalize font-semibold text-sm rounded hover:opacity-80"
                onClick={(e) => showQR(e)}
              >
                Show QR Code
                {loadingButton && (
                  <i className="fa-solid fa-spinner fa-spin ml-2"></i>
                )}
              </button>
            ) : (
              <>
                <img
                  src={twoFAData?.qrcode}
                  alt="qr"
                  className="mx-auto mt-3"
                />
                <p className="text-center text-black-300 text-xs mt-4">
                  {twoFAData?.secret}
                </p>
              </>
            )}
          </>
        )}
        {twoFaEnabled ? (
          <>
            <p className="text-black-300 text-sm text-left mt-5">
              Verify Authentication Code
            </p>
            <p className="text-black-500 text-sm text-left">
              To disable the 2FA, enter the 6-digit code generated by your
              authentication app.
            </p>
          </>
        ) : (
          <>
            <p className="text-black-300 text-sm text-left mt-5">
              Step 2: Verify Authentication Code
            </p>
            <p className="text-black-500 text-sm text-left">
              After scanning the QR code, enter the 6-digit code generated by
              your authentication app.
            </p>
          </>
        )}
        <input
          type="text"
          name="code"
          id="code"
          className={`bg-theme text-sm w-full py-3.5 px-5 rounded-md text-black-200 focus:outline-none focus:bg-theme placeholder:text-black-400 border-rose-800 mt-3`}
          placeholder="Authentication Code"
          value={code}
          onChange={(e) => setCode(e.target.value)}
          autoComplete="off"
        />
        {twoFaEnabled ? (
          <ButtonGreen
            type="submit"
            text="Disable 2FA"
            icon="fa-lock-open"
            onClick={(e) => handleDisable(e)}
            className="bg-roulette-red-300 hover:opacity-80 py-4"
            isLoading={loadingButton}
          />
        ) : (
          <ButtonGreen
            type="submit"
            text="Activate 2FA"
            icon="fa-lock"
            onClick={(e) => handleEnable(e)}
            isLoading={loadingButton}
          />
        )}
      </form>
    </>
  );
};

export default TwoFactor;
